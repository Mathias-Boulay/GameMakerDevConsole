<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize the gui size: Must match the windows size since it's usually greater than the application surface size.
display_set_gui_maximise();

Interact = false;

draw_colour = "";
draw_alpha = "";
draw_shader = "";

Rectangle_drawing = true;
Force_debug_instances_visible = false;
Force_all_instances_visible = false;
Auto_destroy_instance_follower = true;

Text_a = __spse_text_converter_to_sprite_index("Enable rectangle drawing");
Text_b = __spse_text_converter_to_sprite_index("Force debug instances visible");
Text_c = __spse_text_converter_to_sprite_index("Force all instances visible");
Text_d = __spse_text_converter_to_sprite_index("Destroy instances popup when not alive");

//Command interface part:
Typed_text = "";
Displayed_text = __spse_text_converter_to_sprite_index(Typed_text);
for(i=0;i&lt;10;i+=1){
    Commands_history[i] = "";
    }
    
Available_keys = '!"#$%&amp;'+"'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ ";
blink = true;
blink_speed = (room_speed/2);
alarm[11] = blink_speed;
blink_position = __spse_string_size(Typed_text);
history_index = -1




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Switch the blink status
blink = !blink;
alarm[11] = blink_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if the mouse is trying to modify a setting:
if (Interact){
    if device_mouse_check_button_pressed(0,mb_left){
        //Time to check !
        //X axis:
        if device_mouse_x_to_gui(0) &gt; 8 &amp;&amp; device_mouse_x_to_gui(0) &lt; 24{
            //Y axis: No structure for easier readibility
            if device_mouse_y_to_gui(0) &gt; 92 &amp;&amp; device_mouse_y_to_gui(0) &lt; 108{
                //Auto destroy instance_follower if tracked instances not alive anymore
                Auto_destroy_instance_follower = !Auto_destroy_instance_follower
                }
                
            if device_mouse_y_to_gui(0) &gt; 72 &amp;&amp; device_mouse_y_to_gui(0) &lt; 88{
                //Force all instances to be visible
                Force_all_instances_visible = !Force_all_instances_visible;
                }
                
            if device_mouse_y_to_gui(0) &gt; 52 &amp;&amp; device_mouse_y_to_gui(0) &lt; 68{
                //Force debug instances to be visible
                Force_debug_instances_visible = !Force_debug_instances_visible;
                }
            
            if device_mouse_y_to_gui(0) &gt; 32 &amp;&amp; device_mouse_y_to_gui(0) &lt; 48{
                //Enable the drawing of a rectangle on the tracked instance.
                Rectangle_drawing = !Rectangle_drawing;
                }
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="55">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Track the first object found.
var mouse_collision;
mouse_collision = collision_point(mouse_x,mouse_y,all,true,true);
if (mouse_collision != noone){
    //On va traquer cette instance:
    var This_object = instance_create(0,0,object_instance_follower);
    This_object.Instance_to_track = mouse_collision;
    This_object.Instance_name = __spse_text_converter_to_sprite_index(object_get_name(mouse_collision.object_index));
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the main window GUI if the user wants so.
if(Interact){   //It means we have to draw the gui
    //Backup drawing settings to restore them.
    draw_color = draw_get_colour();
    draw_alpha = draw_get_alpha();
    draw_shader = shader_current();
   
    //Set drawing conditions:
    shader_reset();
    draw_set_alpha(0.5);
    draw_set_colour(c_white);
    
    //Background:
    draw_rectangle(0,0,
                        display_get_gui_width(),
                        110,
                        false
                        );
    
    draw_set_alpha(1);
    
    draw_sprite(sprite_checkbox,Rectangle_drawing, 16, 40);
    draw_sprite(sprite_checkbox,Force_debug_instances_visible, 16, 60);
    draw_sprite(sprite_checkbox,Force_all_instances_visible, 16, 80);
    draw_sprite(sprite_checkbox,Auto_destroy_instance_follower, 16, 100);
    
    __spse_draw_text_sprite_font(32, 40, Text_a);
    __spse_draw_text_sprite_font(32, 60, Text_b);
    __spse_draw_text_sprite_font(32, 80, Text_c);
    __spse_draw_text_sprite_font(32, 100, Text_d);
    
    __spse_draw_text_sprite_font(32,16, Displayed_text);
    if (blink){
        draw_line_colour(__spse_string_size(Typed_text)+28,11,__spse_string_size(Typed_text)+28,19,c_black,c_black);
        }

    
                        
    
    
    
    //Reset to the usual state:
    draw_set_color(draw_color);
    shader_set(draw_shader);
    draw_set_alpha(draw_alpha);
    
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="115">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Switch the visibility state of the debugger:
Interact = !Interact;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update the string displayed on the screen
if (string_count(chr(keyboard_key), Available_keys) and string_length(chr(keyboard_key)) == 1){
    blink = true;
    alarm[11] = blink_speed;
    
    switch(keyboard_lastchar){
            
        default:
            Typed_text += keyboard_lastchar;
            break;
        }
    blink_position = __spse_string_size(Typed_text);   
    }
    
    
if !keyboard_check(vk_control){
    switch(keyboard_key){
        case vk_backspace:
            if string_length(Typed_text) &lt;= 1{
                Typed_text = "";
                }
            else{
                Typed_text = string_copy(Typed_text,0,string_length(Typed_text)-1);
                }
            break;
            
        case vk_up:
            history_index = min(array_length_1d(Commands_history)-1,history_index+1);
            break;
            
        case vk_down:
            history_index = max(-1,history_index-1);
            break;
            
        }
    }
    /*
else{
    switch(keyboard_key){
        //If you press the control key:
        }
    }*/
    
Displayed_text = __spse_text_converter_to_sprite_index(Typed_text);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
